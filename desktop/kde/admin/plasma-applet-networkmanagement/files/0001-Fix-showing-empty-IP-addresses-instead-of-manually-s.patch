From 0fd77c6e8f29cb1acb960a7ad8d3716499a6c3c7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?G=C3=B6k=C3=A7en=20Eraslan?= <gokcen@pardus.org.tr>
Date: Thu, 27 Jan 2011 14:35:32 +0000
Subject: [PATCH] Fix showing empty IP addresses instead of manually set IP's, if connection has security
 settings.

---
 backends/NetworkManager/settings/ipv4dbus.cpp |   28 ++++++++++++++++++++++++-
 1 files changed, 27 insertions(+), 1 deletions(-)

diff --git a/backends/NetworkManager/settings/ipv4dbus.cpp b/backends/NetworkManager/settings/ipv4dbus.cpp
index 52b6e20..14bc3a2 100644
--- a/backends/NetworkManager/settings/ipv4dbus.cpp
+++ b/backends/NetworkManager/settings/ipv4dbus.cpp
@@ -71,6 +71,7 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
 
   if (map.contains("addresses")) {
       QDBusArgument addressArg = map.value("addresses").value< QDBusArgument>();
+      bool addressesFound = false;
       QList<Solid::Control::IPv4Address> addresses;
 
       addressArg.beginArray();
@@ -94,10 +95,34 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
           kDebug() << "IP Address:" << QHostAddress(ntohl(uintList.at(0))).toString() << " Subnet:" << uintList.at(1) << "Gateway:" << QHostAddress(ntohl(uintList.at(2))).toString();
 
           addresses << addr;
+          addressesFound = true;
       }
       //NO addressArg.endArray(); it's fatal in debug builds.
 
-      setting->setAddresses(addresses);
+      if (!addressesFound) // workaround for reading values come from our toMap function below
+      {
+          QList<QList <uint> > addressArgUint = map.value("addresses").value< QList <QList <uint> > >();
+          foreach(QList<uint> uintList, addressArgUint)
+          {
+              if (uintList.count() != 3)
+              {
+                kWarning() << "Invalid address format detected. UInt count is " << uintList.count();
+                continue;
+              }
+
+              Solid::Control::IPv4Address addr((quint32)ntohl(uintList.at(0)), (quint32)uintList.at(1), (quint32) ntohl(uintList.at(2)));
+              if (!addr.isValid())
+              {
+                kWarning() << "Invalid address format detected.";
+                continue;
+              }
+              kDebug() << "IP Address:" << QHostAddress(ntohl(uintList.at(0))).toString() << " Subnet:" << uintList.at(1) << "Gateway:" << QHostAddress(ntohl(uintList.at(2))).toString();
+
+              addresses << addr;
+          }
+      }
+      if (addressesFound)
+          setting->setAddresses(addresses);
   }
 
   if (map.contains(QLatin1String(NM_SETTING_IP4_CONFIG_IGNORE_AUTO_DNS))) {
@@ -166,6 +191,7 @@ QVariantMap Ipv4Dbus::toMap()
       map.insert(QLatin1String(NM_SETTING_IP4_CONFIG_DNS_SEARCH), setting->dnssearch());
   }
   if (!setting->addresses().isEmpty()) {
+      //FIXME: Use QDBusArgument instead of QList<QList<uint>> to remove hack in fromMap Ip Address code
       QList<QList<uint> > dbusAddresses;
       foreach (const Solid::Control::IPv4Address &addr, setting->addresses()) {
           QList<uint> dbusAddress;
-- 
1.7.3.4

