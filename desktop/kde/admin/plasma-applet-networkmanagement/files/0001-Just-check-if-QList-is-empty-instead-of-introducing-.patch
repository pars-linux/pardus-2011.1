From c15ccce3fd4fe1b63012dbd5d62f32261e5dbb22 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?G=C3=B6k=C3=A7en=20Eraslan?= <gokcen@pardus.org.tr>
Date: Thu, 27 Jan 2011 16:03:36 +0000
Subject: [PATCH] Just check if QList is empty, instead of introducing new booleans.

---
 backends/NetworkManager/settings/ipv4dbus.cpp |   15 +++++----------
 1 files changed, 5 insertions(+), 10 deletions(-)

diff --git a/backends/NetworkManager/settings/ipv4dbus.cpp b/backends/NetworkManager/settings/ipv4dbus.cpp
index 14bc3a2..03aa49c 100644
--- a/backends/NetworkManager/settings/ipv4dbus.cpp
+++ b/backends/NetworkManager/settings/ipv4dbus.cpp
@@ -26,9 +26,7 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
       setting->setMethod(methodStringToEnum(map.value("method").value<QString>())); }
 
   if (map.contains("dns")) {
-      bool dnsFound = false;
       QList<QHostAddress> dbusDns;
-
       QDBusArgument dnsArg = map.value("dns").value< QDBusArgument>();
 
       dnsArg.beginArray();
@@ -39,14 +37,13 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
           QHostAddress tmpHost(ntohl(utmp));
           dbusDns << tmpHost;
           kDebug() << "DNS IP is " << tmpHost.toString();
-          dnsFound = true;
       }
       //NO dnsArg.endArray(); it's fatal in debug builds.
 
       // try QList<uint> if QDBusArgument demarshalling does not work
       // in toMap method we use QList<uint> to marshall DNS addresses, this hack makes
       // the DNS addresses we marshall at toMap possible to parse
-      if (!dnsFound)
+      if (dbusDns.isEmpty())
       {
           QList <uint> dnsArg = map.value("dns").value< QList<uint> >();
 
@@ -55,11 +52,10 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
               QHostAddress tmpHost(ntohl(utmp));
               dbusDns << tmpHost;
               kDebug() << "DNS IP is " << tmpHost.toString();
-              dnsFound = true;
           }
       }
 
-      if (dnsFound)
+      if (!dbusDns.isEmpty())
           setting->setDns(dbusDns);
   }
 
@@ -71,7 +67,6 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
 
   if (map.contains("addresses")) {
       QDBusArgument addressArg = map.value("addresses").value< QDBusArgument>();
-      bool addressesFound = false;
       QList<Solid::Control::IPv4Address> addresses;
 
       addressArg.beginArray();
@@ -95,11 +90,10 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
           kDebug() << "IP Address:" << QHostAddress(ntohl(uintList.at(0))).toString() << " Subnet:" << uintList.at(1) << "Gateway:" << QHostAddress(ntohl(uintList.at(2))).toString();
 
           addresses << addr;
-          addressesFound = true;
       }
       //NO addressArg.endArray(); it's fatal in debug builds.
 
-      if (!addressesFound) // workaround for reading values come from our toMap function below
+      if (addresses.isEmpty()) // workaround for reading values come from our toMap function below
       {
           QList<QList <uint> > addressArgUint = map.value("addresses").value< QList <QList <uint> > >();
           foreach(QList<uint> uintList, addressArgUint)
@@ -121,7 +115,8 @@ void Ipv4Dbus::fromMap(const QVariantMap & map)
               addresses << addr;
           }
       }
-      if (addressesFound)
+
+      if (!addresses.isEmpty())
           setting->setAddresses(addresses);
   }
 
-- 
1.7.3.4

